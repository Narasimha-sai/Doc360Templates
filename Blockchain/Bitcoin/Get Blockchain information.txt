## Get Blockchain information
**1 credit per API call.**

Gets Bitcoin blockchain information. Obtains basic info like the testnet / mainnet version of the chain, the current block number and its hash.

|  AUTHORIZATIONS: | api_token |
| --- | --- |

## Method
:::(Info) (GET)
:::

## URL  
``` endpoint
https://api-eu1.tatum.io/v3/bitcoin/info
```
### Request Samples
:::(Warning) 
```cURL
curl --request GET \
  --url https://api-eu1.tatum.io/v3/bitcoin/info \
  --header 'x-api-key: REPLACE_KEY_VALUE'
```     
``` Node
const http = require("https");

const options = {
  "method": "GET",
  "hostname": "api-eu1.tatum.io",
  "port": null,
  "path": "/v3/bitcoin/info",
  "headers": {
    "x-api-key": "REPLACE_KEY_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();
```
``` JAVA
HttpResponse<String> response = Unirest.get("https://api-eu1.tatum.io/v3/bitcoin/info")
  .header("x-api-key", "REPLACE_KEY_VALUE")
  .asString();
```
``` Go
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api-eu1.tatum.io/v3/bitcoin/info"

	req, _ := http.NewRequest("GET", url, nil)

	req.Header.Add("x-api-key", "REPLACE_KEY_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}
```
``` PHP
<?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL => "https://api-eu1.tatum.io/v3/bitcoin/info",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "GET",
  CURLOPT_HTTPHEADER => [
    "x-api-key: REPLACE_KEY_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}
```
``` Python3
import http.client

conn = http.client.HTTPSConnection("api-eu1.tatum.io")

headers = { 'x-api-key': "REPLACE_KEY_VALUE" }

conn.request("GET", "/v3/bitcoin/info", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```
```C
CURL *hnd = curl_easy_init();

curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
curl_easy_setopt(hnd, CURLOPT_URL, "https://api-eu1.tatum.io/v3/bitcoin/info");

struct curl_slist *headers = NULL;
headers = curl_slist_append(headers, "x-api-key: REPLACE_KEY_VALUE");
curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

CURLcode ret = curl_easy_perform(hnd);
```
``` C-sharp
var client = new RestClient("https://api-eu1.tatum.io/v3/bitcoin/info");
var request = new RestRequest(Method.GET);
request.AddHeader("x-api-key", "REPLACE_KEY_VALUE");
IRestResponse response = client.Execute(request);
```
``` Javascript-JQuery
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api-eu1.tatum.io/v3/bitcoin/info",
  "method": "GET",
  "headers": {
    "x-api-key": "REPLACE_KEY_VALUE"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});
```
``` Objective-C
#import <Foundation/Foundation.h>

NSDictionary *headers = @{ @"x-api-key": @"REPLACE_KEY_VALUE" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api-eu1.tatum.io/v3/bitcoin/info"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"GET"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];
```
``` Ocaml
open Cohttp_lwt_unix
open Cohttp
open Lwt

let uri = Uri.of_string "https://api-eu1.tatum.io/v3/bitcoin/info" in
let headers = Header.add (Header.init ()) "x-api-key" "REPLACE_KEY_VALUE" in

Client.call ~headers `GET uri
>>= fun (res, body_stream) ->
  (* Do stuff with the result *)
```
``` Ruby
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api-eu1.tatum.io/v3/bitcoin/info")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Get.new(url)
request["x-api-key"] = 'REPLACE_KEY_VALUE'

response = http.request(request)
puts response.read_body
```
``` Swift
import Foundation

let headers = ["x-api-key": "REPLACE_KEY_VALUE"]

let request = NSMutableURLRequest(url: NSURL(string: "https://api-eu1.tatum.io/v3/bitcoin/info")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "GET"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()
```
:::
##  Response samples
:::(Info) (200)

| content type | application/json |
| --- | --- |
```json
{
  "chain": "test",
  "blocks": 1579820,
  "headers": 1579820,
  "bestblockhash": "0000000000000106e4c03ca093ce0cf77e796ddff4f3cadc59ca6b0380e3eed4",
  "difficulty": 6522714.521250089
}
```
:::
:::(Error) (401)

| content type | application/json |
| --- | --- |

|   Example | Error401NotActive|
| --- | --- |

```json
{
  "errorCode": "subscription.not.active",
  "message": "Subscription not active anymore.",
  "statusCode": 401
}
```

|   Example | Error401Invalid |
| --- | --- |

``` json
{
  "errorCode": "subscription.invalid",
  "message": "Unable to find valid subscription for '${apiKey}'",
  "statusCode": 401
}
```
:::
:::(Error) (403)

| content type | application/json |
| --- | --- |
```json
{
  "errorCode": "blockchain.error.code",
  "message": "${error.message} Code: ${error.code}",
  "statusCode": 403
}
```
:::

:::(Error) (500)

| content type | application/json |
| --- | --- |
```json
{
  "message": "Internal server error",
  "statusCode": 500
}
```
:::

## Responses
:::(Info) (200 OK)
| RESPONSE SCHEMA:  | application/json |
| --- | --- |

| Parameters | Type | Description |
| --- | --- | --- |
| chain | string | Chain of the blockchain, main or test. |
| blocks | number | Last block. |
| headers | number | Last headers. |
| bestblockhash	| string | Hash of the last block. |
| difficulty	| number | Difficulty of the algorithm. |

:::
:::(Error) (401 Unauthorized. Not valid or inactive subscription key present in the HTTP Header.)

| RESPONSE SCHEMA:  | application/json |
| --- | --- |

| Error401NotActive |
| --- |

| Parameter | Type | Description |
| --- | --- | --- |
| errorCode (required) | string | subscription.not.active |
| message (required) | string | Subscription not active anymore. |
| statusCode (required) | number | 401 |

| Error401Invalid |
| --- |

| Parameter | Type | Description |
| --- | --- | --- |
| errorCode (required)|string|subscription.invalid|
| message (required) | string |Unable to find valid subscription for '${apiKey}'|
| statusCode (required) | number | 401 |

:::

:::(Error) (403 Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.)

| RESPONSE SCHEMA:  | application/json |
| --- | --- |

| Parameters  | Type  | Description  |
| --- | --- | --- |
| errorCode (required) | string | blockchain.error.code |
| message (required) | string | ${error.message} Code: ${error.code} |
| statusCode (required) | number | 403 |

:::

:::(Error) (500 Internal server error. There was an error on the server while processing the request.)
| RESPONSE SCHEMA:  | application/json |
| --- | --- |

| Parameters | Type | Desctiption |
| --- | --- | --- |
| message (required) | string | Internal server error |
| statusCode (required) | number | 500 |

:::



