## Generate Bitcoin private key
**1 credit per API call.**

Generates a private key for an address from a mnemonic for a given derivation path index. The private key is generated for the specific index - each mnemonic can generate up to 2^32 private keys starting from index 0 until 2^31 - 1.


|  AUTHORIZATIONS: | api_token |
| --- | --- |

:::(Warning) 
| REQUEST BODY SCHEMA  | application/json |
| --- | --- |

|  PARAMETERS |    TYPE     |       DESCRIPTION |
| --- | --- | --- |
| index (required) | integer <= 2147483647 | Derivation index of private key to generate.|
| mnemonic ( required) | string [ 1 .. 500 ] characters | Mnemonic to generate private key from.
:::
## Method
:::(Info) (POST)
:::

## URL  
``` endpoint
https://api-eu1.tatum.io/v3/bitcoin/wallet/priv
```
### Request Samples
:::(Warning) 
``` payload
{
  "index": 0,
  "mnemonic": "urge pulp usage sister evidence arrest palm math please chief egg abuse"
}
```
```cURL
curl --request POST \
  --url https://api-eu1.tatum.io/v3/bitcoin/wallet/priv \
  --header 'content-type: application/json' \
  --header 'x-api-key: REPLACE_KEY_VALUE' \
  --data '{"index":0,"mnemonic":"urge pulp usage sister evidence arrest palm math please chief egg abuse"}'
```     
``` Node
const http = require("https");

const options = {
  "method": "POST",
  "hostname": "api-eu1.tatum.io",
  "port": null,
  "path": "/v3/bitcoin/wallet/priv",
  "headers": {
    "content-type": "application/json",
    "x-api-key": "REPLACE_KEY_VALUE"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.write(JSON.stringify({
  index: 0,
  mnemonic: 'urge pulp usage sister evidence arrest palm math please chief egg abuse'
}));
req.end();
```
``` JAVA
HttpResponse<String> response = Unirest.post("https://api-eu1.tatum.io/v3/bitcoin/wallet/priv")
  .header("content-type", "application/json")
  .header("x-api-key", "REPLACE_KEY_VALUE")
  .body("{\"index\":0,\"mnemonic\":\"urge pulp usage sister evidence arrest palm math please chief egg abuse\"}")
  .asString();
```
``` Go
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "https://api-eu1.tatum.io/v3/bitcoin/wallet/priv"

	payload := strings.NewReader("{\"index\":0,\"mnemonic\":\"urge pulp usage sister evidence arrest palm math please chief egg abuse\"}")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("content-type", "application/json")
	req.Header.Add("x-api-key", "REPLACE_KEY_VALUE")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}
```
``` PHP
<?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL => "https://api-eu1.tatum.io/v3/bitcoin/wallet/priv",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "POST",
  CURLOPT_POSTFIELDS => "{\"index\":0,\"mnemonic\":\"urge pulp usage sister evidence arrest palm math please chief egg abuse\"}",
  CURLOPT_HTTPHEADER => [
    "content-type: application/json",
    "x-api-key: REPLACE_KEY_VALUE"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}
```
``` Python3
import http.client

conn = http.client.HTTPSConnection("api-eu1.tatum.io")

payload = "{\"index\":0,\"mnemonic\":\"urge pulp usage sister evidence arrest palm math please chief egg abuse\"}"

headers = {
    'content-type': "application/json",
    'x-api-key': "REPLACE_KEY_VALUE"
    }

conn.request("POST", "/v3/bitcoin/wallet/priv", payload, headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```
```C
CURL *hnd = curl_easy_init();

curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
curl_easy_setopt(hnd, CURLOPT_URL, "https://api-eu1.tatum.io/v3/bitcoin/wallet/priv");

struct curl_slist *headers = NULL;
headers = curl_slist_append(headers, "content-type: application/json");
headers = curl_slist_append(headers, "x-api-key: REPLACE_KEY_VALUE");
curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"index\":0,\"mnemonic\":\"urge pulp usage sister evidence arrest palm math please chief egg abuse\"}");

CURLcode ret = curl_easy_perform(hnd);
```
``` C-sharp
var client = new RestClient("https://api-eu1.tatum.io/v3/bitcoin/wallet/priv");
var request = new RestRequest(Method.POST);
request.AddHeader("content-type", "application/json");
request.AddHeader("x-api-key", "REPLACE_KEY_VALUE");
request.AddParameter("application/json", "{\"index\":0,\"mnemonic\":\"urge pulp usage sister evidence arrest palm math please chief egg abuse\"}", ParameterType.RequestBody);
IRestResponse response = client.Execute(request);
```
``` Javascript-JQuery
const settings = {
  "async": true,
  "crossDomain": true,
  "url": "https://api-eu1.tatum.io/v3/bitcoin/wallet/priv",
  "method": "POST",
  "headers": {
    "content-type": "application/json",
    "x-api-key": "REPLACE_KEY_VALUE"
  },
  "processData": false,
  "data": "{\"index\":0,\"mnemonic\":\"urge pulp usage sister evidence arrest palm math please chief egg abuse\"}"
};

$.ajax(settings).done(function (response) {
  console.log(response);
});
```
``` Objective-C
#import <Foundation/Foundation.h>

NSDictionary *headers = @{ @"content-type": @"application/json",
                           @"x-api-key": @"REPLACE_KEY_VALUE" };
NSDictionary *parameters = @{ @"index": @0,
                              @"mnemonic": @"urge pulp usage sister evidence arrest palm math please chief egg abuse" };

NSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://api-eu1.tatum.io/v3/bitcoin/wallet/priv"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@"POST"];
[request setAllHTTPHeaderFields:headers];
[request setHTTPBody:postData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@"%@", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@"%@", httpResponse);
                                                }
                                            }];
[dataTask resume];
```
``` Ocaml
open Cohttp_lwt_unix
open Cohttp
open Lwt

let uri = Uri.of_string "https://api-eu1.tatum.io/v3/bitcoin/wallet/priv" in
let headers = Header.add_list (Header.init ()) [
  ("content-type", "application/json");
  ("x-api-key", "REPLACE_KEY_VALUE");
] in
let body = Cohttp_lwt_body.of_string "{\"index\":0,\"mnemonic\":\"urge pulp usage sister evidence arrest palm math please chief egg abuse\"}" in

Client.call ~headers ~body `POST uri
>>= fun (res, body_stream) ->
  (* Do stuff with the result *)
```
``` Ruby
require 'uri'
require 'net/http'
require 'openssl'

url = URI("https://api-eu1.tatum.io/v3/bitcoin/wallet/priv")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE

request = Net::HTTP::Post.new(url)
request["content-type"] = 'application/json'
request["x-api-key"] = 'REPLACE_KEY_VALUE'
request.body = "{\"index\":0,\"mnemonic\":\"urge pulp usage sister evidence arrest palm math please chief egg abuse\"}"

response = http.request(request)
puts response.read_body
```
``` Swift
import Foundation

let headers = [
  "content-type": "application/json",
  "x-api-key": "REPLACE_KEY_VALUE"
]
let parameters = [
  "index": 0,
  "mnemonic": "urge pulp usage sister evidence arrest palm math please chief egg abuse"
] as [String : Any]

let postData = JSONSerialization.data(withJSONObject: parameters, options: [])

let request = NSMutableURLRequest(url: NSURL(string: "https://api-eu1.tatum.io/v3/bitcoin/wallet/priv")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = "POST"
request.allHTTPHeaderFields = headers
request.httpBody = postData as Data

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()
```
:::
##  Response samples
:::(Info) (200)

| content type | application/json |
| --- | --- |
```json
{
  "key": "cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ"
}
```
:::
:::(Error) (400)

| content type | application/json |
| --- | --- |
```json
{
  "errorCode": "validation.failed",
  "message": "Request validation failed. Please see data for additional information.",
  "statusCode": 400,
  "data": [
    {
      "target": {
        "property": 12345
      },
      "value": 12345,
      "property": "property1",
      "constraints": {
        "min": "property1 must not be less than 50000"
      }
    }
  ]
}
```
:::
:::(Error) (401)

| content type | application/json |
| --- | --- |

|   Example |   Error401NotActive |
| --- | --- |

```json
{
  "errorCode": "subscription.not.active",
  "message": "Subscription not active anymore.",
  "statusCode": 401
}
```
|   Example |   Error401Invalid |
| --- | --- |

``` json
{
  "errorCode": "subscription.invalid",
  "message": "Unable to find valid subscription for '${apiKey}'",
  "statusCode": 401
}
```
:::
:::(Error) (403)

| content type | application/json |
| --- | --- |
```json
{
  "errorCode": "key.generation.failed.wrong.mnemonic",
  "message": "Unable to generate address, wrong mnemonic and index.",
  "statusCode": 403
}
```
:::

:::(Error) (500)

| content type | application/json |
| --- | --- |
```json
{
  "message": "Internal server error",
  "statusCode": 500
}
```
:::

## Responses
:::(Info) (200 OK)
| RESPONSE SCHEMA:  | application/json |
| --- | --- |

| Parameters | Type | Description |
| --- | --- | --- |
|   key	 | string | Generated private key |.
:::
:::(Error) (400 Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.)

| RESPONSE SCHEMA:  | application/json |
| --- | --- |

| Parameters | | | Type | Description |
| --- | --- | --- | --- | --- |
| errorCode (required) ||| string | validation.failed |
| message (required)||| string | Request validation failed. Please see data for additional information. |
|statusCode (required) ||| number | 400 |
|data (required) |||Array of objects ||
|  | target (required)  |   | object  | Request object present in the body of the HTTP request  |
|   |   | property name*  | any  |   |  
| | value  |   | number  | Value of the target object which validation is wrong. Can be of any data type, example here is using type number. |
||  property ||string|Property name of the target object which validation is wrong|	
| | constraints ||object|Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.|
|   |   | property name*  | any  |   |

:::

:::(Error) (401 Unauthorized. Not valid or inactive subscription key present in the HTTP Header.)

| RESPONSE SCHEMA:  | application/json |
| --- | --- |

| Error401NotActive |
| --- |

| Parameter | Type | Description |
| --- | --- | --- |
| errorCode (required) | string | subscription.not.active |
| message (required) | string | Subscription not active anymore. |
| statusCode (required) | number | 401 |

| Error401Invalid |
| --- |

| Parameter | Type | Description |
| --- | --- | --- |
| errorCode (required)|string|subscription.invalid|
| message (required) | string |Unable to find valid subscription for '${apiKey}'|
| statusCode (required) | number | 401 |

:::

:::(Error) (403 Forbidden. The request is authenticated, but it is not possible to perform the required operation due to a logical error or invalid permissions.)

| RESPONSE SCHEMA:  | application/json |
| --- | --- |

| Parameters |   Type | Description |
| --- | --- | --- |
| errorCode (required) |string | key.generation.failed.wrong.mnemonic |
| message (required) | string |Unable to generate address, wrong mnemonic and index. |
|   statusCode (required) | number | 403|
:::

:::(Error) (500 Internal server error. There was an error on the server while processing the request.)
| RESPONSE SCHEMA:  | application/json |
| --- | --- |

| Parameters | Type | Desctiption |
| --- | --- | --- |
| message (required) | string | Internal server error |
| statusCode (required) | number | 500 |

:::



